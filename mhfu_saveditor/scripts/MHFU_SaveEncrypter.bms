# Monster Hunter Freedom Unite (PSP)
# Script to reimport and encrypt save file data
#
# Requires the file 'MHFUdic_en.bin' at output location!
#
# Takes arguments:
# arg1: game type (currently: MHP2G_JP, MHP2G_EU, MHP2G_US)
# arg2: use quest list yes/no; "list" for yes, "nolist" or anything for no
# arg3: unlock bonus content in save file yes/no (doesn't lock on no)
# arg4-9: quest names to import (when not using the list)
#
# MEMORY_FILE  - build file for save data
# MEMORY_FILE2 - copy of questlist.txt for importing
# MEMORY_FILE3 - save copy for SHA-1 hashing
# MEMORY_FILE4 - questblock.sav for quest insertion
# MEMORY_FILE8 - temporary quest copy for decryption
# MEMORY_FILE9 - temporary quest copy for insertion
#
# Written by HenryEx
# revision 4
#
# script for QuickBMS http://quickbms.aluigi.org

################################################
# Preparations

QuickBMSver 0.6
print "Setup..."

#opened file doesn't really matter, but let's check for proper batching
  get FILENAME filename 0
  if FILENAME != "MHP2NDG.bin"
    print "Opened the wrong file: %FILENAME%! Exiting..."
    CleanExit
  endif
  get FILESIZE asize 0
  if FILESIZE != 0x16A100
    print "Unexpected filesize: %FILESIZE%! Exiting..."
    CleanExit
  endif

#setup virtual memory file for save data
  math TMP = 0x16A100
  log MEMORY_FILE 0 0
  putvarchr MEMORY_FILE TMP 0  # build file for save data
  log MEMORY_FILE 0 0

# load charset cipher dictionaries and store in arrays
# note: value MUST be accessed with SAVEDEC[sub] and SAVEENC[sub]!
# Open "." "MHFUdic_de.bin" 10
  Open "." "MHFUdic_en.bin" 11
  for sub = 0 < 256
#   get SAVEDEC[sub] byte 10
    get SAVEENC[sub] byte 11
  next sub

# Set up default values and salts
  set SHA1SALT_EU string "3Nc94Hq1zOLh8d62Sb69"
  set SHA1SALT_JP string "S)R?Bf8xW3#5h9lGU8wR"
  set SHA1SALT_3RD string "VQ(DOdIO9?X3!2GmW#XF"
  set KEY_LOWDEFAULT long 0x215F
  set KEY_HIGHDEFAULT long 0xDFA3
  set KEY_LOWMOD long 0xFF8F
  set KEY_HIGHMOD long 0xFFEF
  set QKEY_DEFAULT0 long 0x1709
  set QKEY_DEFAULT2 long 0x3DF3
  set QKEY_DEFAULT4 long 0x747B
  set QKEY_DEFAULT6 long 0xB381
  set QKEY_MOD0 long 0xFF9D
  set QKEY_MOD2 long 0xFFA9
  set QKEY_MOD4 long 0xFFC7
  set QKEY_MOD6 long 0xFFF1
  set END string "EO"
  string END + "F"  # this is killing me

# get arg1: game region
  if quickbms_arg1 == "MHP2G_JP"
    set SHA1SALT string SHA1SALT_JP
    set BCONTENT long 0x07FFFBFF
  elif quickbms_arg1 == "MHP2G_EU"
    set SHA1SALT string SHA1SALT_EU
    set BCONTENT long 0x07FFF9FF
  elif quickbms_arg1 == "MHP2G_US"
    set SHA1SALT string SHA1SALT_EU
    set BCONTENT long 0x07FFF9FF
  elif quickbms_arg1 & "quickbms_arg"  # no argument was passed
    print "Missing argument: game region! Exiting..."
    CleanExit
  else
    print "Invalid game type %quickbms_arg1%! Exiting..."
    CleanExit
  endif

# get arg3: writing bonus content into the save
  if quickbms_arg3 == "bonus"
    print "Unlocking bonus content in save file."
    math GETBONUS = 1
  else
    math GETBONUS = 0
  endif

# get arg2: using the quest list
  if quickbms_arg2 == "list"
    print "Using quest list for quest importing."
    Open "." "questlist.txt" 0 LEXIST
    if LEXIST == 0  # let's make EXTRA SURE THE LIST EXISTS
      math NOLIST = 1
      print "Cannot find questlist.txt! Checking manual input..."
    else
      get LISTSIZE asize 0
      log MEMORY_FILE2 0 LISTSIZE 0
    endif
  elif quickbms_arg2 & "quickbms_arg"  # no argument was passed
    print "Missing argument: quest list! Checking manual input..."
    math NOLIST = 1
  else
    print "Not using quest list for quest importing. Checking manual input..."
    math NOLIST = 1
  endif

# get arg4-9 quest names if not using the list
if NOLIST == 1
  log MEMORY_FILE2 0 0
  for i = 1 < 7
    if i = 1
      set ARGQ string quickbms_arg4
    elif i = 2
      set ARGQ string quickbms_arg5
    elif i = 3
      set ARGQ string quickbms_arg6
    elif i = 4
      set ARGQ string quickbms_arg7
    elif i = 5
      set ARGQ string quickbms_arg8
    elif i = 6
      set ARGQ string quickbms_arg9
    endif
    if ARGQ ext "mib"
      put ARGQ line MEMORY_FILE2
    elif ARGQ & "quickbms_arg" || ARGQ == "" # none or empty argument passed
      put "" line MEMORY_FILE2  # empty line
    else
      print "Specified quest #%i% is not a .mib file: %ARGQ%! Skipping..."
      put "" line MEMORY_FILE2  # empty line
    endif
  next i
  put END line MEMORY_FILE2
endif

# Open files to insert & assemble
  Open "." "settings.sav" 0
  Open "." "character1.sav" 1
  Open "." "character2.sav" 2
  Open "." "character3.sav" 3
  Open "." "questblock.sav" 4
  Open "." "footer.sav" 5
  Open "." "sha-1.bin" 6
  Open "." "savekey.bin" 7
  get SIZE0 asize 0
  get SIZE1 asize 1
  get SIZE2 asize 2
  get SIZE3 asize 3
  get SIZE4 asize 4
  get SIZE5 asize 5
  get SIZE6 asize 6
  get SIZE7 asize 7
  log MEMORY_FILE4 0 SIZE4 4  # get questblock.sav for quest insertion

# check filesizes
  if SIZE0 != 0x1000
    print "Invalid filesize '%SIZE0%' for settings.sav!"
    CleanExit
  elif SIZE1 != 0x6B100
    print "Invalid filesize '%SIZE1%' for character1.sav!"
    CleanExit
  elif SIZE2 != 0x6B100
    print "Invalid filesize '%SIZE2%' for character2.sav!"
    CleanExit
  elif SIZE3 != 0x6B100
    print "Invalid filesize '%SIZE3%' for character3.sav!"
    CleanExit
  elif SIZE4 != 0x27060
    print "Invalid filesize '%SIZE4%' for questblock.sav!"
    CleanExit
  elif SIZE5 != 0xD88
    print "Invalid filesize '%SIZE5%' for footer.sav!"
    CleanExit
  elif SIZE6 != 0x14
    print "Invalid filesize '%SIZE6%' for sha-1.bin!"
    CleanExit
  elif SIZE7 != 4
    print "Invalid filesize '%SIZE7%' for key.bin!"
    CleanExit
  endif

################################################
# Insert quest files; loop through 6 files

goto 0 MEMORY_FILE2
set OFFSET long 0  # work on inserting in MEMORY_FILE4, the questblock

for q = 0 < 6
# Get quest file to open
  get QFILE line MEMORY_FILE2
  math QEXIST = 0  # reset variable
  math QEMPTY = 0  # reset variable

  if QFILE == END  # reached EOF on the list
    math q = 5
    math QEMPTY = 1
  elif QFILE == ""  # empty line
    math QEMPTY = 1
  elif QFILE ext "mib"  #valid quest file
    Open "." QFILE 8 QEXIST
  else  # anything else
    math QEXIST = 1
    math QEMPTY = 1
  endif

  if QEXIST == 1 && QEMPTY == 0  # this is where we get work done

    get QFSIZE asize 8           # get quest file size
    log MEMORY_FILE8 0 QFSIZE 8  # load cur. quest into MF8 for decryption
    log MEMORY_FILE9 0 QFSIZE 8  # load cur. quest into MF9 for copying
    print "Inserting quest file %QFILE%..."

  # Get decryption keys and initialize them
    for i = 0 < 4
      math key = i
      get QKEY[key] short MEMORY_FILE8
      if key == 0 && QKEY[key] == 0
        math QKEY[key] = QKEY_DEFAULT0
      elif key == 1 && QKEY[key] == 0
        math QKEY[key] = QKEY_DEFAULT2
      elif key == 2 && QKEY[key] == 0
        math QKEY[key] = QKEY_DEFAULT4
      elif key == 3 && QKEY[key] == 0
        math QKEY[key] = QKEY_DEFAULT6
      endif
    next i

  # Decrypt quest header to read filesize & questID
    SavePos POS MEMORY_FILE8  # get current file position
    set DATA short 0  # init data variable
    for i = 0 < 12  # header size is 0x18
    # advance key first. uses different key for each short in 8 bytes, then repeats.
      xmath key "i % 4"
      if key == 0
        math QKEY[key] u* QKEY_DEFAULT0
        math QKEY[key] u% QKEY_MOD0
      elif key == 1
        math QKEY[key] u* QKEY_DEFAULT2
        math QKEY[key] u% QKEY_MOD2
      elif key == 2
        math QKEY[key] u* QKEY_DEFAULT4
        math QKEY[key] u% QKEY_MOD4
      elif key == 3
        math QKEY[key] u* QKEY_DEFAULT6
        math QKEY[key] u% QKEY_MOD6
      endif
      math QKEY[key] & 0xFFFF

      # decrypt data and advance position
      getvarchr DATA MEMORY_FILE8 POS short
      math DATA u^ QKEY[key]
      putvarchr MEMORY_FILE8 POS DATA short
      math POS + 2
    next i

  # Get quest size from dec. header and compare to file size
    get QSIZE long MEMORY_FILE8
    xmath QDSIZE "QSIZE + 0x20"  # add size of the header
    if QFSIZE != QDSIZE
      print "Error: %QFILE% file size does not match! Quest might be corrupted. Please try again without %QFILE%."
      CleanExit
    endif

  # Decrypt rest of quest to check magic
    goto 0x20 MEMORY_FILE8
    SavePos POS MEMORY_FILE8  # get current file position
    xmath LOOP "QSIZE / 2"
    set DATA short 0  # init data variable
    for i = 0 < LOOP
    # advance key first. uses different key for each short in 8 bytes, then repeats.
      xmath key "i % 4"
      if key == 0
        math QKEY[key] u* QKEY_DEFAULT0
        math QKEY[key] u% QKEY_MOD0
      elif key == 1
        math QKEY[key] u* QKEY_DEFAULT2
        math QKEY[key] u% QKEY_MOD2
      elif key == 2
        math QKEY[key] u* QKEY_DEFAULT4
        math QKEY[key] u% QKEY_MOD4
      elif key == 3
        math QKEY[key] u* QKEY_DEFAULT6
        math QKEY[key] u% QKEY_MOD6
      endif
      math QKEY[key] & 0xFFFF

      # decrypt data and advance position
      getvarchr DATA MEMORY_FILE8 POS short
      math DATA u^ QKEY[key]
      putvarchr MEMORY_FILE8 POS DATA short
      math POS + 2
    next i

/*  Unneccessary, now that we store the actual file name
  # get quest ID to store as filename & check magic
    get QID long MEMORY_FILE8
    getdstring QMAGIC 4 MEMORY_FILE8
    if QMAGIC != "2NDG"
      print "Error: %QFILE% does not seem to be a valid quest! Quest might be corrupted. Please try again without %QFILE%."
      CleanExit
    endif
    math QID + 0x38  # add header size + quest ID offset to pointer
    goto QID MEMORY_FILE8
    get QID short MEMORY_FILE8
    string QNAME = "m"
    string QNAME + QID
    string QNAME + ".mib"
*/
  # check magic & get max. 15 chars filename to store
    get QID long MEMORY_FILE8
    getdstring QMAGIC 4 MEMORY_FILE8
    if QMAGIC != "2NDG"
      print "Error: %QFILE% does not seem to be a valid quest! Quest might be corrupted. Please try again without %QFILE%."
      CleanExit
    endif
    set QNAME basename QFILE # get name without extension
    string QNAME - -11       # limit to 11 chars
    string QNAME + ".mib"    # re-add extension

  # store quest in questblock.sav
    set DATA byte 0  # init data variable
    for i = 0 < QFSIZE
      xmath QOFF "OFFSET + i"
      getvarchr DATA MEMORY_FILE9 i
      putvarchr MEMORY_FILE4 QOFF DATA
    next i
    xmath QOFF "OFFSET + 0x6800"
    goto QOFF MEMORY_FILE4
    putdstring QNAME 0x10 MEMORY_FILE4

    print "Stored %QFILE% in save as: %QNAME%"
    math OFFSET + 0x6810  # storage offset for next quest file

  elif QEXIST == 0 && QEMPTY == 0
    print "Quest file %QFILE% not found! Skipping..."
  elif QEXIST == 0 && QEMPTY == 1
    math QEMPTY = 0  # do basically nothing, for empty lines
  elif QEXIST == 1 && QEMPTY == 1
    print "Warning: %QFILE% is not a .mib file! Skipping..."
  endif
next q

################################################
# Create save file

# assemble savedata in memory for hashing & encryption
  append  # Append ON
  log MEMORY_FILE 0 SIZE0 0
  log MEMORY_FILE 0 SIZE1 1
  log MEMORY_FILE 0 SIZE2 2
  log MEMORY_FILE 0 SIZE3 3
  log MEMORY_FILE 0 SIZE4 MEMORY_FILE4
  log MEMORY_FILE 0 SIZE5 5
  log MEMORY_FILE 0 SIZE6 6
  log MEMORY_FILE 0 SIZE7 7
  append  # Append OFF
  get MSIZE asize MEMORY_FILE

# Unlock bonus content if enabled
  if GETBONUS == 1
    getvarchr BONUS MEMORY_FILE 0x20 long
    math BONUS | BCONTENT
    putvarchr MEMORY_FILE 0x20 BONUS long
  endif

################################################
# Make SHA-1 hash

print "Adding SHA-1 hash..."

# make copy of save for use with salt
  xmath MSIZE3 "MSIZE - 0x24"
  log MEMORY_FILE3 0 MSIZE3 MEMORY_FILE  # copy for hashing
  goto MSIZE3 MEMORY_FILE3
  putct SHA1SALT string -1 MEMORY_FILE3
  get MSIZE3 asize MEMORY_FILE3
  Encryption sha1 ""
  log MEMORY_FILE3 0 MSIZE3 MEMORY_FILE3
  Encryption "" ""

# get calculated hash and write to save file
  xmath OFFSET "MSIZE - 0x18"
  goto OFFSET MEMORY_FILE
  putdstring QUICKBMS_HASH 0x14 MEMORY_FILE
  print "SHA-1 hash added: %QUICKBMS_HEXHASH%"

################################################
# Encrypt save

print "Encrypting save..."
  get SKEY long 7  # get plain key

# initialize key
  set LOKEY long SKEY
  set HIKEY long SKEY
  math LOKEY & 0xFFFF  # get low 16 bits
  math HIKEY u> 16  # get high 16 bits
  if HIKEY == 0
    math HIKEY = KEY_HIGHDEFAULT
  elif LOKEY == 0
    math LOKEY = KEY_LOWDEFAULT
    math HIKEY = KEY_HIGHDEFAULT
  endif
  math HIKEY u< 16  # shift up again
  math SKEY = HIKEY
  math SKEY u+ LOKEY  #combine key again

# encrypt save
  # Put file + stored key through substitution table
    for i = 0 < MSIZE
      getvarchr sub MEMORY_FILE i
      math CRYPT = SAVEENC[sub]
      putvarchr MEMORY_FILE i CRYPT
    next i

  # advance key and XOR 32b blocks of the file with it
    xmath LOOP "(MSIZE - 4) / 4"
    for i = 0 < LOOP  # filelength / 4
      xmath POS "i * 4"  # get current file position

      # advance key
      set LOKEY long SKEY
      set HIKEY long SKEY
      math LOKEY & 0xFFFF  # get low 16 bits
      math LOKEY u* KEY_LOWDEFAULT
      math LOKEY u% KEY_LOWMOD
      math HIKEY u> 16  # get high 16 bits
      math HIKEY u* KEY_HIGHDEFAULT
      math HIKEY u% KEY_HIGHMOD
      math HIKEY u< 16  # shift up again
      math SKEY u= HIKEY
      math SKEY u+ LOKEY  #combine key again

      # XOR data with key
      getvarchr DATA MEMORY_FILE POS long
      math DATA u^ SKEY
      putvarchr MEMORY_FILE POS DATA long
    next i

  # Put file + stored key through substitution table again
    for i = 0 < MSIZE
      getvarchr sub MEMORY_FILE i
      math CRYPT = SAVEENC[sub]
      putvarchr MEMORY_FILE i CRYPT
    next i

################################################
# Save finished file to disk

log "MHP2NDG.BIN" 0 MSIZE MEMORY_FILE
print "Finished encrypting save file."

CleanExit

